enum RedemptionState{
  AWAITING_WITHDRAWAL_SIGNATURE,
  AWAITING_WITHDRAWAL_PROOF,
  REDEEMED_ERROR_MOVE_TO_LIQUIDATION
  REDEEMED
}

enum LiquidationState{
  COURTESY_CALL,
  FRAUD_LIQUIDATION_IN_PROGRESS,
  LIQUIDATION_IN_PROGRESS,
  LIQUIDATED
}

enum BondedECDSAKeepState{
  ACTIVE,
  CLOSED,
  TERMINATED 
}

enum DepositState{
  AWAITING_SIGNER_SETUP,
  AWAITING_BTC_FUNDING_PROOF,
  LIQUIDATED,
  REDEEMED,
  SETUP_FAILED
}


type Transfer @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  value: BigDecimal!
  from: Bytes
  to: Bytes
  gasPrice: BigInt
  gasUsed: BigInt
}

type TokenHolder @entity{
  id: ID!
  "KEEP Token balance of this address expressed in the smallest unit of the KEEP Token"
  tokenBalanceRaw: BigInt!
  "KEEP Token balance of this address expressed as a BigDecimal normalized value for the KEEP Token"
  tokenBalance: BigDecimal!
  "Total amount of KEEP Token ever held by this address expressed in the smallest unit of the KEEP Token"
  totalTokensHeldRaw: BigInt!
  "Total amount of KEEP Token ever held by this address expressed as a BigDecimal normalized value for the KEEP Token"
  totalTokensHeld: BigDecimal!
  tbtcToken : TBTCToken!
}

type TBTCToken @entity{
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  address: Bytes!
  totalSupply: BigDecimal
  maxSupply: BigInt
  currentTokenHolders: BigInt
  totalMint: BigDecimal
  totalBurn: BigDecimal
  holders: [TokenHolder!] @derivedFrom(field: "tbtcToken")
}

type Mint @entity{
  id : ID!  
  timestamp: BigInt!
  transaction : Transaction
  to : Bytes
  amount : BigDecimal!
}

type Transaction @entity{
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  from: Bytes
  to: Bytes
  mints: [Mint!] @derivedFrom(field: "transaction")
  burns: [DepositRedemption!] @derivedFrom(field: "transaction")
  deposit: Deposit @derivedFrom(field: "transaction")
}

type Deposit @entity{
  "Deposite Contract Address"
  id: ID!
  tbtcToken: TBTCToken
  timestamp : BigInt
  transaction: Transaction
  signerFeeDivisor : BigInt
  state : DepositState!
  lotSize : BigInt
  initialCollateralizedPercent : BigInt
  undercollateralizedThresholdPercent : BigInt
  severelyUndercollateralizedThresholdPercent : BigInt
  remainingPauseTerm : BigInt
  owner : Bytes
  utxoSize: BigDecimal
  keepAddress: Bytes
  bondedECDSAKeep: BondedECDSAKeep @derivedFrom(field: "deposit")
  depositRedemption : DepositRedemption @derivedFrom(field: "deposit")
  depositLiquidation : DepositLiquidation  @derivedFrom(field: "deposit")
}

type DepositRedemption @entity{
  id: ID!
  transaction: Transaction
  depositContractAddress: Bytes
  digest: Bytes
  outpoint : Bytes
  redeemerOutputScript: Bytes
  requestedFee : BigInt
  requester : Bytes
  utxoSize : BigDecimal!
  state: RedemptionState
  timestamp: BigInt!
  txid: Bytes
  deposit: Deposit!
}

type DepositLiquidation @entity{
  id: ID!
  transaction: Transaction
  wasFraud : Boolean
  state: LiquidationState
  timestamp: BigInt!
  deposit : Deposit!
}

type AllowNewDepositsUpdated @entity{
  id:ID!
  allowNewDepositsUpdated: Boolean
}

type BondedECDSAKeep @entity{
  "Owner address"
  id:ID!
  owner: Bytes!
  transaction: Transaction!
  keepAddress: Bytes
  honestThreshold : BigInt
  timestamp: BigInt!
  openKeepFeeEstimate: BigDecimal
  state : BondedECDSAKeepState!
  deposit: Deposit!
  operators: [Member!] @derivedFrom(field: "bondedECDSAKeeps")
}

type TotalBondedECDSAKeep @entity{
  id: ID!
  totalAvailable : BigDecimal!
  totalBonded : BigDecimal!
  totalKeepOpened : BigInt
  totalKeepActive: BigInt
}

type Member @entity{
  "Operator address"
  id: ID!
  memberLocks: [MemberLocked!]
  unboundAvailable : BigDecimal!
  destination : Bytes
  seizeAmount : BigDecimal
  authorizedSortitionPool : Bytes
  beneficiary : Bytes
  bondedECDSAKeeps: [BondedECDSAKeep!]
}

type MemberLocked @entity {
  "Operator address  + holder +  referenceID"
  id: ID!
  operator: Bytes
  holder: Bytes
  referenceID: BigInt
  bonded: BigDecimal!
  member: Member! @derivedFrom(field: "memberLocks")
}